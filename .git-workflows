name: Deploy

on:
  push:
    branches: [gitops]
    paths: ['src/**']
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      changed-services: ${{ steps.changes.outputs.changed-services }}
      matrix: ${{ steps.changes.outputs.matrix }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed services
        id: changes
        run: |
          SERVICES=("ui" "catalog" "cart" "checkout" "orders")
          CHANGED_SERVICES=()
          
          echo "🔍 Checking for changes in services..."
          
          # Check for changes in each service
          for service in "${SERVICES[@]}"; do
            if git diff --name-only HEAD~1 HEAD | grep -q "^src/$service/" || [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
              CHANGED_SERVICES+=("$service")
              echo "✅ Changes detected in: $service"
            else
              echo "⏭️ No changes in: $service"
            fi
          done
          
          # If manual trigger, build all services
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "🔄 Manual trigger - building all services"
            CHANGED_SERVICES=("ui" "catalog" "cart" "checkout" "orders")
          fi
          
          # Check if we have any changes
          if [ ${#CHANGED_SERVICES[@]} -eq 0 ]; then
            echo "❌ No services changed"
            echo "has-changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Create matrix for changed services only
          MATRIX_JSON="["
          for i in "${!CHANGED_SERVICES[@]}"; do
            if [ $i -gt 0 ]; then
              MATRIX_JSON+=","
            fi
            MATRIX_JSON+="\"${CHANGED_SERVICES[$i]}\""
          done
          MATRIX_JSON+="]"
          
          echo "changed-services=${CHANGED_SERVICES[*]}" >> $GITHUB_OUTPUT
          echo "matrix={\"service\":$MATRIX_JSON}" >> $GITHUB_OUTPUT
          echo "has-changes=true" >> $GITHUB_OUTPUT
          
          echo "📊 Services to build: ${CHANGED_SERVICES[*]}"
          echo "📊 Generated matrix: {\"service\":$MATRIX_JSON}"

  deploy:
    name: Deploy ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    permissions:
      contents: write
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push ${{ matrix.service }}
        run: |
          SERVICE="${{ matrix.service }}"
          TAG="$(echo ${{ github.sha }} | cut -c1-7)"
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"
          ECR_REPO="${AWS_ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/retail-store-${SERVICE}"
          
          echo "🔨 Building ${SERVICE}:${TAG}"
          
          # Create ECR repo if it doesn't exist
          aws ecr describe-repositories --repository-names "retail-store-${SERVICE}" 2>/dev/null || \
          aws ecr create-repository --repository-name "retail-store-${SERVICE}" \
            --image-scanning-configuration scanOnPush=true \
            --encryption-configuration encryptionType=AES256
          
          # Build and push
          docker build -t "${ECR_REPO}:${TAG}" -t "${ECR_REPO}:latest" "src/${SERVICE}/"
          docker push "${ECR_REPO}:${TAG}"
          docker push "${ECR_REPO}:latest"
          
          echo "✅ Pushed ${ECR_REPO}:${TAG}"
          echo "ECR_REPO=${ECR_REPO}" >> $GITHUB_ENV

      - name: Update Helm values for ${{ matrix.service }}
        run: |
          SERVICE="${{ matrix.service }}"
          TAG="$(echo ${{ github.sha }} | cut -c1-7)"
          ECR_REPO="${{ env.ECR_REPO }}"
          VALUES_FILE="src/${SERVICE}/chart/values.yaml"
          
          echo "📝 Updating Helm values for ${SERVICE}"
          echo "   Repository: ${ECR_REPO}"
          echo "   Tag: ${TAG}"
          echo "   File: ${VALUES_FILE}"
          
          # Validate file exists
          if [[ ! -f "${VALUES_FILE}" ]]; then
            echo "❌ Values file not found: ${VALUES_FILE}"
            exit 1
          fi
          
          # Show before state
          echo "📋 Before update (main service image):"
          grep -A3 "^image:" "${VALUES_FILE}" | head -4 || echo "No main image section found"
          
          # Create a backup
          cp "${VALUES_FILE}" "${VALUES_FILE}.backup"
          
          # Update only the main service image (first occurrence under 'image:' section)
          # This preserves infrastructure component images (mysql, redis, postgresql, rabbitmq, dynamodb)
          awk -v repo="${ECR_REPO}" -v tag="${TAG}" '
          BEGIN { in_main_image = 0; updated_repo = 0; updated_tag = 0 }
          /^image:/ { in_main_image = 1; print; next }
          in_main_image && /^[[:space:]]*repository:/ && !updated_repo { 
            print "  repository: " repo; updated_repo = 1; next 
          }
          in_main_image && /^[[:space:]]*tag:/ && !updated_tag { 
            print "  tag: \"" tag "\""; updated_tag = 1; next 
          }
          /^[a-zA-Z]/ && !/^image:/ { in_main_image = 0 }
          { print }
          ' "${VALUES_FILE}.backup" > "${VALUES_FILE}"
          
          # Validate the update worked
          if grep -q "${ECR_REPO}" "${VALUES_FILE}" && grep -q "\"${TAG}\"" "${VALUES_FILE}"; then
            echo "✅ Successfully updated ${VALUES_FILE}"
            echo "📋 After update (main service image):"
            grep -A3 "^image:" "${VALUES_FILE}" | head -4
            
            # Show that infrastructure images are preserved
            echo "🔒 Infrastructure images preserved:"
            grep -A1 "repository:" "${VALUES_FILE}" | grep -E "(mysql|redis|postgres|rabbitmq|dynamodb-local)" || echo "No infrastructure images found"
          else
            echo "❌ Update failed - restoring backup"
            mv "${VALUES_FILE}.backup" "${VALUES_FILE}"
            exit 1
          fi
          
          # Remove backup
          rm "${VALUES_FILE}.backup"

      - name: Commit Helm changes for ${{ matrix.service }}
        run: |
          SERVICE="${{ matrix.service }}"
          TAG="$(echo ${{ github.sha }} | cut -c1-7)"
          
          git config --local user.email "gitops@github.com"
          git config --local user.name "GitOps Bot"
          
          if ! git diff --quiet "src/${SERVICE}/chart/values.yaml"; then
            git add "src/${SERVICE}/chart/values.yaml"
            git commit -m "🚀 Update ${SERVICE} Helm chart to ${TAG} - ECR: retail-store-${SERVICE} - Commit: ${{ github.sha }}"
            
            # Push with retry logic
            for i in {1..3}; do
              if git push origin gitops; then
                echo "✅ Successfully pushed Helm update for ${SERVICE}"
                break
              else
                echo "⚠️ Push failed for ${SERVICE}, attempt $i/3. Retrying..."
                git pull --rebase origin gitops
                sleep 2
              fi
              
              if [ $i -eq 3 ]; then
                echo "❌ Failed to push ${SERVICE} after 3 attempts"
                exit 1
              fi
            done
          else
            echo "📝 No Helm changes to commit for ${SERVICE}"
          fi

  summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy]
    if: always()
    steps:
      - name: Create deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** gitops" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.detect-changes.outputs.has-changes }}" == "true" ]; then
            echo "**Changed Services:** ${{ needs.detect-changes.outputs.changed-services }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ "${{ needs.deploy.result }}" == "success" ]; then
              echo "✅ **Status:** Deployment successful" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Actions completed:**" >> $GITHUB_STEP_SUMMARY
              echo "- 🔨 Built and pushed Docker images to ECR" >> $GITHUB_STEP_SUMMARY
              echo "- 📝 Updated Helm chart values" >> $GITHUB_STEP_SUMMARY
              echo "- 💾 Committed changes to repository" >> $GITHUB_STEP_SUMMARY
              echo "- 🔄 ArgoCD will sync automatically" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Status:** Deployment failed" >> $GITHUB_STEP_SUMMARY
              echo "Check the workflow logs for details" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "ℹ️ **Status:** No services changed - no deployment needed" >> $GITHUB_STEP_SUMMARY
          fi
